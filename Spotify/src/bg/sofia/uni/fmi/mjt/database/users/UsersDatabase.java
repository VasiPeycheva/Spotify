package bg.sofia.uni.fmi.mjt.database.users;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.locks.ReentrantReadWriteLock;

import bg.sofia.uni.fmi.mjt.database.users.exeptions.UserAlreadyExistException;
import bg.sofia.uni.fmi.mjt.database.users.exeptions.UserNotRegisteredException;
import bg.sofia.uni.fmi.mjt.database.users.exeptions.WrongPasswordException;
import bg.sofia.uni.fmi.mjt.logger.Level;
import bg.sofia.uni.fmi.mjt.logger.Logger;

public class UsersDatabase {

	public final Integer VERIGICATION_ARGC = 3;
	private final String USERS_FILENAME = "users_file.txt";
	private PrintWriter write;
	private Map<String, String> users;
	private ReentrantReadWriteLock lock;
	private Logger logger;

	public UsersDatabase(Logger logger) {
		this.logger = logger;
		users = new HashMap<>();
		lock = new ReentrantReadWriteLock();
		try {
			write = new PrintWriter(new FileOutputStream(USERS_FILENAME, true), true);
		} catch (FileNotFoundException e) {
			logger.log("Failed to open " + USERS_FILENAME + " (FILE NOT FOUND)", Level.ERROR);
		}
		loadUsers();
	}

	/**
	 * 
	 * Register @user and save all needed data for disaster recovery. All passwords
	 * are saved as hash, generated by @HashGenerator
	 * 
	 * @see HashGenerator
	 * 
	 * @param username
	 * @param password
	 * @throws UserAlreadyExistException
	 *             if @username is already in the database
	 */
	public void register(String username, String password) throws UserAlreadyExistException {
		lock.writeLock().lock();
		try {
			if (users.containsKey(username)) {
				logger.log("username <" + username + "> already exist!", Level.INFO);
				throw new UserAlreadyExistException(username);
			} else {
				users.put(username, HashGenerator.getHash(password, logger));
				logger.log("user <" + username + "> have been successfully registered!", Level.INFO);
				saveUser(username, password);
			}
		} finally {
			lock.writeLock().unlock();
		}
	}

	/**
	 * 
	 * Check if @username exist in the database and @password is correct (use SHA-1)
	 * 
	 * @param username
	 * @param password
	 * @throws UserNotRegisteredException
	 *             if @username is not register in the database
	 * @throws WrongPasswordException
	 *             if @username type wrong password
	 */
	public void login(String username, String password) throws UserNotRegisteredException, WrongPasswordException {
		lock.readLock().lock();
		try {
			if (users.containsKey(username)) {
				String check = users.get(username);
				if (check.equals(HashGenerator.getHash(password, logger))) {
					logger.log("user <" + username + "> logged successfully!", Level.INFO);
					return;
				} else {
					logger.log("user <" + username + "> login failed - wrong password!", Level.INFO);
					throw new WrongPasswordException();
				}
			}
			logger.log("user <" + username + "> is not registered!", Level.INFO);
			throw new UserNotRegisteredException(username);
		} finally {
			lock.readLock().unlock();
		}
	}

	/**
	 * 
	 * Save user in format username:passwordHash
	 * 
	 * @param username
	 * @param password
	 */
	private void saveUser(String username, String password) {
		write.println(username + ":" + HashGenerator.getHash(password, logger));
	}

	/**
	 * 
	 * Load all existing users from disaster recovery file
	 * 
	 */
	private void loadUsers() {
		String line = null;
		try (BufferedReader read = new BufferedReader(new FileReader(USERS_FILENAME))) {
			while ((line = read.readLine()) != null) {
				String[] tokens = line.split(":");
				users.put(tokens[0], tokens[1]);
			}
		} catch (FileNotFoundException e) {
			logger.log("Failed to load users database (FILE NOT FOUND)", Level.ERROR);
		} catch (IOException e) {
			logger.log("Failed to load users database (INTERNAL ERROR)", Level.ERROR);
		}
	}

}
